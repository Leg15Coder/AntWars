import matplotlib.pyplot as plt
import numpy as np
from models import *
from matplotlib.patches import RegularPolygon
from matplotlib.font_manager import FontProperties
from threading import Thread
from queue import Queue
import time


class AsyncVisualizer:
    def __init__(self):
        self.queue = Queue()
        self.thread = Thread(target=self._visualization_thread, daemon=True)
        self.thread.start()
        self.emoji_font = self._find_emoji_font()
        self.is_running = True

    def _visualization_thread(self):
        plt.ion()  # –í–∫–ª—é—á–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        self.fig, self.ax = plt.subplots(figsize=(10, 10))
        self.ax.set_aspect('equal')

        while self.is_running:
            if not self.queue.empty():
                game_state = self.queue.get()
                self._draw_map(game_state)
                plt.pause(0.1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            time.sleep(0.1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É

    def _find_emoji_font(self):
        """–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ–¥–∑–∏"""
        try:
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è Windows/Linux
            return FontProperties(fname='/usr/share/fonts/truetype/noto/NotoColorEmoji.ttf')
        except:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç (—ç–º–æ–¥–∑–∏ –º–æ–≥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏)
            return FontProperties(family='sans-serif')

    def _draw_map(self, game_state):
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)"""
        self.ax.clear()
        self.ax.set_title(f"DatsPulse Map - Turn {game_state.turn_no}")
        self.ax.set_facecolor('lightgray')

        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥–µ–∫—Å–æ–≤
        hex_colors = {
            HexType.ANTHILL: '#68006C',
            HexType.EMPTY: '#f0f0f0',
            HexType.DIRT: '#007730',
            HexType.ACID: '#A2000C',
            HexType.STONE: '#333333'
        }

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
        all_q = [hex.q for hex in game_state.map]
        all_r = [hex.r for hex in game_state.map]

        # –†–∏—Å—É–µ–º –≥–µ–∫—Å—ã
        for hex in game_state.map:
            q, r = hex.q, hex.r
            x = q * 0.866  # cos(30¬∞)
            y = r + q * 0.5

            hex_patch = RegularPolygon(
                (x, y),
                numVertices=6,
                radius=0.5,
                facecolor=hex_colors.get(hex.type, '#ffffff'),
                edgecolor='#888888',  # —Å–µ—Ä—ã–π
                linewidth=0.5
            )
            self.ax.add_patch(hex_patch)

            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä–æ–º–æ–∂–¥–µ–Ω–∏—è
            if abs(q) <= 2 or abs(r) <= 2 or q == 0 or r == 0:
                self.ax.text(x, y, f"{q},{r}", ha='center', va='center', fontsize=6, color='#555555')

        # –†–∏—Å—É–µ–º –º—É—Ä–∞–≤—å–µ–≤
        ant_colors = {
            AntType.WORKER: '#4169e1',  # royal blue
            AntType.SOLDIER: '#32cd32',  # lime green
            AntType.SCOUT: '#00bfff'  # deep sky blue
        }

        for ant in game_state.ants:
            q, r = ant.q, ant.r
            x = q * 0.866
            y = r + q * 0.5

            if ant.type == AntType.SCOUT:
                x -= 0.2
                y -= 0.2
            elif ant.type == AntType.WORKER:
                y += 0.21
            else:
                x += 0.2
                y -= 0.2

            color = ant_colors.get(ant.type, '#000000')
            self.ax.plot(x, y, marker='o', markersize=8, color=color, markeredgecolor='black', markeredgewidth=0.5)

        # –†–∏—Å—É–µ–º —Ä–µ—Å—É—Ä—Å—ã
        food_symbols = {
            FoodType.APPLE: 'üçé',
            FoodType.BREAD: 'üçû',
            FoodType.NECTAR: 'üçØ'
        }

        for food in game_state.food:
            q, r = food.q, food.r
            x = q * 0.866
            y = r + q * 0.5
            symbol = food_symbols.get(food.type, '?')
            self.ax.text(x, y - 0.25, f"{symbol}{food.amount}",
                    ha='center', va='center', fontsize=8)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–ø–∞—Å–æ–º
        margin = 1.5
        min_x = min(q * 0.866 for q in all_q) - margin
        max_x = max(q * 0.866 for q in all_q) + margin
        min_y = min(r + q * 0.5 for q, r in zip(all_q, all_r)) - margin
        max_y = max(r + q * 0.5 for q, r in zip(all_q, all_r)) + margin

        self.ax.set_xlim(min_x, max_x)
        self.ax.set_ylim(min_y, max_y)
        self.ax.axis('off')

        plt.draw()

    def update(self, game_state):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏"""
        self.queue.put(game_state)

    def close(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        self.is_running = False
        self.thread.join()
        plt.close(self.fig)
